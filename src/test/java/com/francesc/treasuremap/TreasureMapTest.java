package com.francesc.treasuremap;

import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class TreasureMapTest {
	
	private int [][] mapTest = {{'X','-','-'},{'-','-','-'},{'-','-','X'}};
	private int [][] mapResult = {{1,1,0},{1,2,1},{0,1,1}};

	/**
	 * Test if TreasureMap solves mapTest as mapResult expected
	 */
	@Test public void testTreasureMapSolve(){
		TreasureMap t = new TreasureMap(mapTest);
		//t.setMap(mapTest);
		t.solve();
		
		int [][] result = t.getResult();
		
		for(int i = 0; i < result.length; i++){
			for(int j = 0; j < result[i].length; j++){
				assertTrue(mapResult[i][j] == result[i][j]);
			}
		}
	}
	
	/**
	 * Test if TreasureMapRecursive solves mapTest as mapResult expected
	 */
	@Test public void testTreasureMapRecursive(){
		TreasureMapRecursive t = new TreasureMapRecursive(mapTest);
		t.solve();
		
		int [][] map = t.getResult();
		
		for(int i = 0; i < map.length; i++){
			for(int j = 0; j < map[i].length; j++){
				assertTrue(mapResult[i][j] == map[i][j]);
			}
		}	
	}
	
	/**
	 * Test if there is any runtime exception
	 */
	@Test public void testTreasureMapSolveAutoGenerated(){
		TreasureMap t = new TreasureMap(10,10,0.9);
		t.populate();
		t.solve();
		
		t = new TreasureMap(0,0,0.9);
		t.populate();
		t.solve();
	}
	
	/**
	 * Test to be sure that a null map cannot be used
	 */
	@Test public void testTreasureMapFailIfMapNull(){
		boolean ex = false;
		TreasureMap t = null;
		try{
			t = new TreasureMap(null);
		}catch(NullPointerException e){
			ex = true;
		}
		assertTrue(ex);	
	}
	
	/**
	 * Test to ensure that no exceptions are thrown
	 */
	@Test public void testTreasureMapRecursiveAutoGenerated(){
		TreasureMapRecursive t = new TreasureMapRecursive(10,10,0.9);
		t.populate();
		t.solve();
		
		t = new TreasureMapRecursive(0,0,0.9);
		t.populate();
		t.solve();
	}
}
