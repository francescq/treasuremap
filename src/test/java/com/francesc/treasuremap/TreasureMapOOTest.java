package com.francesc.treasuremap;


import static org.junit.Assert.assertTrue;


import org.junit.Test;

import com.francesc.treasuremap.oo.Point;
import com.francesc.treasuremap.oo.TreasureMapIterative;
import com.francesc.treasuremap.oo.TreasureMapRecursive;

public class TreasureMapOOTest {
	
	private int [][] mapTest = {{'X','-','-'},{'-','-','-'},{'-','-','X'}};
	private int [][] mapResult = {{1,1,0},{1,2,1},{0,1,1}};

	/**
	 * Test if TreasureMap solves mapTest as mapResult expected
	 */
	@Test public void testTreasureMapSolve(){
		TreasureMapIterative t = new TreasureMapIterative(mapTest);
		//t.setMap(mapTest);
		t.solve();
		
		for(int i = 0; i < mapResult.length; i++){
			for(int j = 0; j < mapResult[i].length; j++){
				Point p = (Point) t.getMap().get(i).get(j);
				assertTrue(mapResult[i][j] == p.getNumTreasures());
			}
		}
	}
	
	/**
	 * Test if TreasureMapRecursive solves mapTest as mapResult expected
	 */
	@Test public void testTreasureMapRecursive(){
		TreasureMapRecursive t = new TreasureMapRecursive(mapTest);
		t.solve();
		
		for(int i = 0; i < mapResult.length; i++){
			for(int j = 0; j < mapResult[i].length; j++){
				Point p = (Point) t.getMap().get(i).get(j);
				assertTrue(mapResult[i][j] == p.getNumTreasures());
			}
		}	
	}
	
	/**
	 * Test if there is any runtime exception
	 */
	@Test public void testTreasureMapIterativeSolveAutoGenerated(){
		TreasureMapIterative t = new TreasureMapIterative(10,10,0.9);
		t.populate();
		t.solve();
		
		t = new TreasureMapIterative(0,0,0.9);
		t.populate();
		t.solve();
	}
	
	/**
	 * Test to be sure that a null map cannot be used
	 */
	@Test public void testTreasureMapFailIfMapNull(){
		boolean ex = false;
		TreasureMapIterative t = null;
		try{
			t = new TreasureMapIterative(null);
		}catch(NullPointerException e){
			ex = true;
		}
		assertTrue(ex);	
	}
	
	/**
	 * Test to ensure that no exceptions are thrown
	 */
	@Test public void testTreasureMapRecursiveAutoGenerated(){
		TreasureMapRecursive t = new TreasureMapRecursive(10,10,0.9);
		t.populate();
		t.solve();
		
		t = new TreasureMapRecursive(0,0,0.9);
		t.populate();
		t.solve();
	}
}
